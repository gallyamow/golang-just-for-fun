package ratelimiter

import "testing"

// Цели использования rate limiter:
// Защита ресурсов
// Ограничение количества запросов к серверу, базе данных или API.
// Пример: API стороннего сервиса может разрешать максимум 1000 запросов в час. Rate limiter предотвращает превышение лимита.
//
// Предотвращение перегрузки
// Контролирует поток запросов, чтобы система не «падала» под нагрузкой.
// Пример: ограничение одновременных соединений с базой данных.
//
// Сглаживание трафика
// Устраняет резкие всплески запросов, которые могут вызвать сбои.
// Пример: пользователи массово кликают на кнопку — Token Bucket позволяет обработать «всплеск» без перегрузки.
//
// Контроль злоупотреблений и спама
// Предотвращает DDoS-атаки или массовые автоматические действия.
// Пример: ограничение количества логинов или отправки сообщений с одного IP.
//
// Справедливое распределение ресурсов
// Все пользователи или клиенты получают равный доступ.
// Пример: SaaS-сервис позволяет каждому пользователю максимум 100 операций в минуту.
//
// Оптимизация стоимости и производительности
// Контролирует расход ресурсов (CPU, память, трафик), особенно в облачных сервисах.
// Пример: ограничение частоты вызовов платного API, чтобы не тратить лишние деньги.
func TestTokenBucket(t *testing.T) {
	t.Run("allow", func(t *testing.T) {
		tb := NewTokenBucket(10, 1)
		if !tb.Allow() {
			t.Errorf("not allow")
		}
	})
}
